{"version":3,"sources":["components/CountryInfo.js","components/CountrySelect.js","App.js","serviceWorker.js","index.js"],"names":["CountryInfo","props","state","countryData","this","fetchCountryData","prevProps","country","url","fetch","response","ok","Error","statusText","json","data","setState","length","Country","Confirmed","Deaths","Recovered","Component","CountrySelect","countries","onChange","changeCountry","map","value","Slug","key","App","selectedCountry","e","target","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAoDeA,E,kDAjDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,YAAa,MAHH,E,gEASdC,KAAKC,qB,yCAGUC,GACXA,EAAUC,UAAYH,KAAKH,MAAMM,SACjCH,KAAKC,qB,oKAKHG,E,mDAAkDJ,KAAKH,MAAMM,S,SAC5CE,MAAMD,G,WAAvBE,E,QACQC,G,sBACJC,MAAMF,EAASG,Y,uBAENH,EAASI,O,OAAtBC,E,OACNX,KAAKY,SAAS,CACVb,YAAaY,EAAKA,EAAKE,OAAS,K,sIAKpC,IAAKb,KAAKF,MAAMC,YACZ,OAAO,KAFN,MAM2CC,KAAKF,MAAMC,YAApDe,EANF,EAMEA,QAASC,EANX,EAMWA,UAAWC,EANtB,EAMsBA,OAAQC,EAN9B,EAM8BA,UAEnC,OACI,6BACI,4BAAKH,GACL,2CAAiBC,GACjB,sCAAYC,GACZ,yCAAeC,Q,GA5CLC,aCiCXC,E,kDAhCX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTsB,UAAW,IAHD,E,wOASSf,M,mDAAjBC,E,QACQC,G,sBACJC,MAAMF,EAASG,Y,uBAENH,EAASI,O,OAAtBC,E,OACNX,KAAKY,SAAS,CACVQ,UAAWT,I,sIAKf,OACI,6BACI,4BAAQU,SAAUrB,KAAKH,MAAMyB,eACxBtB,KAAKF,MAAMsB,UAAUG,KAAI,SAACpB,GAAD,OACtB,4BAAQqB,MAAOrB,EAAQsB,KAAMC,IAAKvB,EAAQsB,MAAOtB,EAAQW,kB,GAzBrDI,aC2BbS,E,4MAtBb7B,MAAQ,CACN8B,gBAAiB,iB,EAInBN,cAAgB,SAACO,GACf,EAAKjB,SAAS,CACZgB,gBAAiBC,EAAEC,OAAON,S,uDAK5B,OACE,yBAAKO,MAAM,OACT,wDACA,kBAAC,EAAD,CAAeT,cAAetB,KAAKsB,gBACnC,kBAAC,EAAD,CAAanB,QAASH,KAAKF,MAAM8B,uB,GAjBvBV,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4444cd3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CountryInfo extends Component {\n    constructor(props){\n        super(props); // calls constructor of React.Component\n        this.state = {\n            countryData: null\n        }\n    }\n\n    // a react hook called when the object is created\n    componentDidMount() {\n        this.fetchCountryData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.country !== this.props.country) {\n            this.fetchCountryData();\n        }\n    }\n\n    async fetchCountryData() {\n        const url = `https://api.covid19api.com/total/country/${this.props.country}`;\n        const response = await fetch(url); // fetch is an asynchronous function\n        if (!response.ok) { // throw Error if response is not right\n            throw Error(response.statusText);\n        }\n        const data = await response.json(); // await creates a javascript \"promise\"\n        this.setState({\n            countryData: data[data.length - 1]\n        }) // use setState outside of a constructor, use this.state elsewhere\n    }\n\n    render() {\n        if (!this.state.countryData) {\n            return null;\n        }\n\n        //JS Destructuring to stop from always typing this.state.CountryData\n        const {Country, Confirmed, Deaths, Recovered} = this.state.countryData;\n\n        return (\n            <div>\n                <h3>{Country}</h3>\n                <p>Total Cases: {Confirmed}</p>\n                <p>Deaths: {Deaths}</p>\n                <p>Recovered: {Recovered}</p>\n            </div>\n        )\n    }\n}\n\nexport default CountryInfo;","import React, { Component } from 'react';\n\nclass CountrySelect extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            countries: []\n        }\n    }\n\n    async componentDidMount() {\n        const url = `https://api.covid19api.com/countries`;\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        const data = await response.json();\n        this.setState({\n            countries: data\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <select onChange={this.props.changeCountry}>\n                    {this.state.countries.map((country) => ( // map each country to an option\n                        <option value={country.Slug} key={country.Slug}>{country.Country}</option>\n                    ))}\n                </select>\n            </div>\n        )\n    }\n}\n\nexport default CountrySelect;","import React, { Component } from 'react';\nimport './App.css';\nimport CountryInfo from './components/CountryInfo'\nimport CountrySelect from './components/CountrySelect'\n\n// Using class Component rather than standard functional Component\nclass App extends Component {\n  state = {\n    selectedCountry: \"united-states\"\n  }\n\n  // JS Arrow Function, not called immediately\n  changeCountry = (e) => {\n    this.setState({ // arrow function means this is lexically binded and refers to immediate scope around the function in App\n      selectedCountry: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div class=\"App\">\n        <h1>COVID-19 Data by Country</h1>\n        <CountrySelect changeCountry={this.changeCountry}/>\n        <CountryInfo country={this.state.selectedCountry}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}